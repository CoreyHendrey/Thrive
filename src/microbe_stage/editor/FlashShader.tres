[gd_resource type="VisualShader" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=8]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeTexture" id=10]
source = 2
texture_type = 1

[sub_resource type="VisualShaderNodeColorUniform" id=13]
uniform_name = "ColorUniform"

[resource]
code = "shader_type canvas_item;
uniform vec4 ColorUniform : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// ColorUniform:9
	vec3 n_out9p0 = ColorUniform.rgb;
	float n_out9p1 = ColorUniform.a;

// VectorOp:3
	vec3 n_out3p0 = n_out5p0 + n_out9p0;

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
custom_defines = ""
graph_offset = Vector2( -241, -315.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, -80 )
nodes/fragment/3/node = SubResource( 8 )
nodes/fragment/3/position = Vector2( 180, -100 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( -100, -200 )
nodes/fragment/9/node = SubResource( 13 )
nodes/fragment/9/position = Vector2( -60, -60 )
nodes/fragment/connections = PoolIntArray( 5, 0, 3, 0, 3, 0, 0, 0, 9, 0, 3, 1, 5, 1, 0, 1 )
